name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ====== Frontend Build & Test ======
  frontend-build:
    runs-on: ubuntu-latest
    name: Frontend Build & Test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        working-directory: ./client
        run: bun install

      - name: Build frontend
        working-directory: ./client
        run: bun run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ./client/dist/
          retention-days: 5

  # ====== Backend Build & Test ======
  backend-build:
    runs-on: ubuntu-latest
    name: Backend Build & Test
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV (Python Package Manager)
        run: pip install uv

      - name: Install dependencies
        working-directory: ./server
        run: uv sync

      - name: Lint with flake8 (optional)
        working-directory: ./server
        run: |
          uv run pip install flake8
          uv run flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || true

      - name: Run tests (if any)
        working-directory: ./server
        run: |
          uv run pip install pytest pytest-asyncio
          uv run pytest tests/ -v || true

  # ====== Build Docker Images ======
  build-images:
    needs: [frontend-build, backend-build]
    runs-on: ubuntu-latest
    name: Build Docker Images
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/client:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ====== Deploy to DigitalOcean ======
  deploy:
    needs: build-images
    runs-on: ubuntu-latest
    name: Deploy to DigitalOcean
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DIGITALOCEAN_IP }}
          username: root
          password: ${{ secrets.DIGITALOCEAN_PASSWORD }}
          port: 22
          script: |
            set -e
            
            echo "üìç Navigating to project directory..."
            cd /root/kearney || cd /opt/kearney || cd ~/kearney
            
            echo "üîÑ Pulling latest code..."
            git pull origin main
            
            echo "üîê Logging in to container registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            echo "üì• Pulling latest images..."
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/client:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:latest
            
            echo "üõë Stopping running containers..."
            docker-compose -f docker-compose.prod.yml down || true
            
            echo "üöÄ Starting containers..."
            docker-compose -f docker-compose.prod.yml up -d
            
            echo "‚úÖ Deployment complete!"
            docker-compose -f docker-compose.prod.yml ps

  # ====== Security Scan (Optional) ======
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
